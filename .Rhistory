colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
X <- iris[,1:2]
X <- scale(X)
U <- runif(ncol(X), 0, 1)
U <- U / sqrt(sum(U^2))
projections <- (as.matrix(X) %*% matrix(U)) %*% U
cutpoint <- apply(projections, 2, median)
cutpoint <- data.frame(m1 = cutpoint[1], m2 = cutpoint[2])
a <- (data.frame(projections, X))
colnames(a) <- c("p1", "p2", "x1", "x2")
ggplot(a) + geom_point(aes(x = x1, y = x2)) +
geom_line(aes(x = p1, y = p2)) +
geom_point(aes(x = m1, y = m2), data = cutpoint, col = "red", size = 5)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook())
setwd("~/Google Drive/Berkeley PhD/Packages/Supervised Heatmaps/tutorials")
setwd("~/Google Drive/Berkeley PhD/Packages/Supervised Heatmaps/superheat/")
devtools::load_all()
superheat(mtcars, scale = T)
# identify all scaled values that fall below -0.3
mtcars.col <- scale(mtcars) < -0.3
# set all values that satisfy the condition to "white"
mtcars.col <- gsub("TRUE", "white", mtcars.col)
# set all values that do not satisfy the condition to "black"
mtcars.col <- gsub("FALSE", "black", mtcars.col)
# convert to matrix
mtcars.col <- matrix(mtcars.col, ncol = ncol(mtcars))
# go superheat!
superheat(mtcars,
# normalize the variables/columns
scale = T,
# add the raw measurements
X.text = as.matrix(mtcars),
X.text.col = mtcars.col)
```
set.seed(347824)
# go superheat!
superheat(mtcars,
# normalize the variables/columns
scale = T,
# change the color scheme to viridis
heat.col.scheme = "viridis",
# plot dendrogram and perform hierarchical clustering on rows
row.dendrogram = TRUE,
# cluster columns into three clusters
n.clusters.cols = 3,
# force the bottom labels to be variable names
bottom.label = "variable",
# change the vertical and horizontal lines
grid.vline.col = "white",
grid.hline.col = "white",
grid.vline.size = 3,
# remove label backgrounds and rearrange
bottom.label.col= "white",
bottom.label.text.angle = 90,
bottom.label.text.alignment = "right",
bottom.label.text.size = 10,
left.label.col = "white",
left.label.size = 0.35,
left.label.text.alignment = "right")
devtools::test()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::load_all()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::load_all()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::load_all()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::load_all()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::load_all()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::load_all()
superheat(X = iris[,-5],
yt = 1:2,
membership.cols = c(1, 2, 2, 2))
devtools::test()
devtools::check()
superheat(mtcars)
superheat(mtcars, col.dendrogram = T)
superheat(mtcars, col.dendrogram = F)
superheat(mtcars, col.dendrogram = T, pretty.order.cols = F)
superheat(mtcars, col.dendrogram = T, n.clusters.cols = 3)
superheat(mtcars, n.clusters.cols = 3)
superheat(mtcars, n.clusters.cols = 3, pretty.order.cols = F)
superheat(mtcars, n.clusters.cols = 3, pretty.order.cols = T)
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
iris.coef <- lm(Petal.Length ~ Sepal.Length + Sepal.Width + Petal.Width, data = iris)$coef
# generate the plot:
superheat(X = iris[,c("Sepal.Width","Sepal.Length","Petal.Width")], # heatmap matrix
yr = iris[,"Petal.Length"], #plot Petal.Length to the right
yr.axis.name = "Petal.Length",
membership.rows = iris[,"Species"], # cluster the rows by species
yt = iris.coef[-1], # plot the model coefficients above
yt.plot.type = "bar", # make the plot above a barplot
yt.axis.name = "coefficient")
superheat(mtcars)
devtools::install_github("rlbarter/superheat")
superheat(mtcars)
superheat(X = mtcars, # heatmap matrix
X.text = as.matrix(mtcars))
# set the text colors
# identify all scaled values that fall below -0.3
mtcars.col <- scale(mtcars) < -0.3
# set all values that satisfy the condition to "white"
mtcars.col <- gsub("TRUE", "white", mtcars.col)
# set all values that do not satisfy the condition to "black"
mtcars.col <- gsub("FALSE", "black", mtcars.col)
# convert to matrix
mtcars.col <- matrix(mtcars.col, ncol = ncol(mtcars))
superheat(X = mtcars, # heatmap matrix
X.text = as.matrix(mtcars),
X.text.col = mtcars.col)
superheat(mtcars,
scale = TRUE)
# identify all scaled values that fall below -0.3
mtcars.col <- scale(mtcars) < -0.3
# set all values that satisfy the condition to "white"
mtcars.col <- gsub("TRUE", "white", mtcars.col)
# set all values that do not satisfy the condition to "black"
mtcars.col <- gsub("FALSE", "black", mtcars.col)
# convert to matrix
mtcars.col <- matrix(mtcars.col, ncol = ncol(mtcars))
superheat(X = mtcars, # heatmap matrix
scale = TRUE
X.text = as.matrix(mtcars),
X.text.col = mtcars.col)
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col)
mtcars.size = as.matrix(runif(length(mtcars), 0, 1), ncol = ncol(mtcars))
mtcars.size = as.matrix(runif(length(mtcars), 0, 1), ncol = ncol(mtcars))
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = mtcars.size)
mtcars.size
mtcars.size = as.matrix(runif(nrow(mtcars) * ncol(mtcars), 0, 1), ncol = ncol(mtcars))
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = mtcars.size)
mtcars.size
mtcars.size = matrix(runif(nrow(mtcars) * ncol(mtcars), 0, 1), ncol = ncol(mtcars), nrow = nrow(mtcars))
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = mtcars.size)
mtcars.size = matrix(runif(nrow(mtcars) * ncol(mtcars), 1, 10), ncol = ncol(mtcars), nrow = nrow(mtcars))
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = mtcars.size)
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = scale(mtcars))
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = scale(mtcars) + 1)
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = scale(mtcars) + 2)
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.size = scale(mtcars) + 4)
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.angle = 45)
superheat(X = mtcars, # heatmap matrix
scale = TRUE,
X.text = as.matrix(mtcars),
X.text.col = mtcars.col,
X.text.angle = 12)
superheat(X = mtcars, # heatmap matrix
# change the size of the labels
left.label.size = 0.4,
bottom.label.size = 0.1,
# scale the matrix columns
scale = TRUE,
# add text matrix
X.text = as.matrix(mtcars),
X.text.size = 5)
superheat(X = mtcars, # heatmap matrix
# change the size of the labels
left.label.size = 0.4,
bottom.label.size = 0.1,
# scale the matrix columns
scale = TRUE,
# add text matrix
X.text = as.matrix(mtcars),
X.text.size = 4)
devtools::load_all()
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
# calcualte correlation of each variable with horsepower
hp.cor <- cor(mtcars)[, "hp"]
# remove horsepower and mpg from the correlation vector and convert to a vector
hp.cor <- t(hp.cor) %>%
as.data.frame %>%
select(-mpg, -hp) %>%
unlist
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
#order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
devtools::load_all()
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
#order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
#order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
#order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
devtools::load_all()
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
#order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
#order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
devtools::load_all()
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
#order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
#order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
#order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# order the rows by mpg
order.rows = order(mtcars$mpg),
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
# order columns by correlation with horsepower
#order.cols = order(hp.cor),
left.label.size = 0.43,
bottom.label.size = 0.1)
# plot a superheatmap
superheat(dplyr::select(mtcars, -mpg, -hp),
# scale the variables/columns
scale = T,
# add mpg as a scatterplot next to the rows
yr = mtcars$mpg,
yr.point.size = 4,
yr.axis.name = "miles per gallon",
# add a bar plot for correlation with horsepower for each variable
yt = hp.cor,
yt.plot.type = "bar",
yt.axis.name = "correlation\nwith horse power",
yt.cluster.col = c("#66c2a5", "#1b9e77"),
left.label.size = 0.43,
bottom.label.size = 0.1)
superheat(mtcars,
# order the rows by miles per gallon
order.rows = order(mtcars$mpg),
# change the size of the labels
left.label.size = 0.4,
bottom.label.size = 0.1,
# scale the matrix columns
scale = TRUE)

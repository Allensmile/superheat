{
    "collab_server" : "",
    "contents" : ".packageName <- \"IsolationForest\"\n###########################################################################\n#\n#    Isolation Forest -- Anomaly detection using binary trees\n#    Copyright (C) 2009 Fei Tony Liu\n#\n#    This program is free software; you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation; either version 2 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful, but\n#    WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program; if not, write to the Free Software\n#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n##########################################################################\n\nAnomalyScore<-function(x, forest, ntree = forest$ntree, hlim = forest$hlim, appRange=F)\n{\n if (!inherits(forest,\"iForest\"))\n    stop(\"forest is not a iForest object\")\n\n    fout<-NULL\n\n    if (!is.null(forest$trees))\n    {\n          samSize<- if (forest$trees$rowSamp) forest$trees$nRowSamp\n                else forest$trees$xrow\n\n          nrowx<-nrow(x)\n          ncolx<-forest$trees$xcol\n          \n          xn<-x[,!forest$colisfactor]\n          xn<-data.matrix(xn)\n          storage.mode(xn) <- \"double\"\n\n          ptime<-system.time( fout<- .C( \"rtDepth\",\n                       x=xn,\n                       as.integer(nrowx),\n                       as.integer(ncolx),\n                       as.integer(samSize),\n                       as.integer(forest$trees$nrnodes),\n                       as.integer(ntree),\n                       as.integer(hlim),\n                       as.integer(forest$trees$nodeStatus),\n                       as.integer(forest$trees$lDaughter),\n                       as.integer(forest$trees$rDaughter),\n                       as.integer(forest$trees$splitAtt),\n                       as.double(forest$trees$splitPoint),\n                       as.double(forest$trees$ulim),\n                       as.double(forest$trees$llim),\n                       as.integer(forest$trees$nSam),\n                       as.integer(appRange),\n                       outF = double(nrowx),\n                       pathLength = double(nrowx),\n                       isoby = matrix(integer(nrowx*ncolx), ncol=ncolx),\n                       isoat = matrix(double(nrowx*ncolx), ncol=ncolx),\n                       DUP=FALSE,\n                       PACKAGE = \"IsolationForest\")[17:20])\n          fout$ptime<-ptime\n          rm(xn)\n    }\n fout\n}\n###########################################################################\n#\n#    Isolation Forest -- Anomaly detection using binary trees\n#    Copyright (C) 2009 Fei Tony Liu\n#\n#    This program is free software; you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation; either version 2 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful, but\n#    WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program; if not, write to the Free Software\n#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n##########################################################################\n\nIsolationTrees<-function(x, ntree=10, hlim=as.integer(ceiling(log2(nrow(x)))), rowSamp=F, nRowSamp=nrow(x), nmin = 1, rFactor =1, colSamp = F, nColSamp = ncol(x), colWeight = c(rep(1,ncol(x))))\n# x is a data frame on which the random trees are built.\n# ntree is the number of trees to build.\n# hlim is the height limit for trees, its default value is log2(nrow(x))\n#rowSamp is a logical swith to perform random instance sub-sampling\n#nRowSamp is the instance sub-sampling size; it must be less than or equal to the training sample size\n# colSamp is alogical switch to perform random attribute sub-sampling}\n# nColSamp is the attribute sub-sampling size; it must be less than or equal to the number of attributes\n\n{\n     #Trees are implemented as a set of matrices, each row is a tree\n     #lDaughter and rDaughter are column pointers to find the respective left and right daughters\n     #nodeStatus, see rt.h for nodeStatus\n     #splitAtt indicates which attribute is splitted\n     #splitPoint store the split point values\n     #ulim is the upper limit of splitAtt value to which the node applies\n     #llim is the lower limit of splitAtt value to which the node applies\n     #nSam is the number of samples that the node had.\n\n     colWeight<-colWeight\n     hlim<-hlim\n     nRowSamp<-nRowSamp\n     nColSamp<-nColSamp\n     rowSamp<-rowSamp\n     colSamp<-colSamp\n     ntree<-ntree\n     \n     if (rowSamp && (nRowSamp>= nrow(x))) stop(\"nRowSamp must be smaller than nrow(x)\")\n     if (colSamp && (nColSamp>= ncol(x))) stop(\"nColSamp must be smaller than ncol(x)\")\n\n     if (hlim<2)\n     {hlim<-2}\n\n     nrnodes <- min(if(rowSamp) nRowSamp else nrow(x), 2^hlim) * 2 - 1\n\n\n     rtout<-NULL\n     ptime<-NULL\n     colisfactor<-FALSE\n\n     allxcols<-colnames(x)\n     \n     if (is.data.frame(x))\n     {\n        colisfactor<-unlist(lapply(x, is.factor))\n        colnlevels<-unlist(lapply(x, nlevels))\n\n        if (any(colisfactor))\n        {\n            print(\"Factors are not handled in Isolation Forest!\")\n\n        }\n     }\n\n     if (any(!colisfactor))\n     {\n\n         ncolWeight <- colWeight[!colisfactor]\n         xcols<-colnames(x)\n         x<-data.matrix(x)\n         nrowx<-nrow(x)\n         ncolx<-ncol(x)\n         storage.mode(x) <- \"double\"\n         ptime<-system.time(rtout<- .C(    \"rTrees\",\n                          x = x,\n                          xrow = as.integer(nrowx),\n                          xcol = as.integer(ncolx),\n                          nrnodes = as.integer(nrnodes),\n                          ntree = as.integer(ntree),\n                          hlim = as.integer(hlim),\n                          rowSamp = as.integer(rowSamp),\n                          nRowSamp = as.integer(nRowSamp),\n                          colSamp = as.integer(colSamp),\n                          nColSamp = as.integer(nColSamp),\n                          nmin = as.integer(nmin),\n                          rFactor = as.double(rFactor),\n                          colWeight = as.double(ncolWeight),\n                          nodeStatus = matrix(integer(nrnodes*ntree), ncol=ntree),\n                          lDaughter = matrix(integer(nrnodes*ntree), ncol=ntree),\n                          rDaughter = matrix(integer(nrnodes*ntree), ncol=ntree),\n                          splitAtt = matrix(integer(nrnodes*ntree), ncol=ntree),\n                          splitPoint = matrix(double(nrnodes*ntree), ncol=ntree),\n                          ulim = matrix(double(nrnodes*ntree), ncol = ntree),\n                          llim = matrix(double(nrnodes*ntree), ncol = ntree),\n                          nSam = matrix(integer(nrnodes*ntree), ncol=ntree),\n                          ntreeSize = integer(ntree),\n                          DUP=FALSE,\n                          PACKAGE = \"IsolationForest\")[2:22])\n     }\n\n     out<-list(xcols=allxcols,\n          trees=rtout,\n          ptime=ptime,\n          colisfactor=colisfactor,\n          colnlevels=colnlevels,\n          ntree = ntree,\n          hlim = hlim)\n     class(out)<-\"iForest\"\n     return(out)\n}\n\n\n.onAttach <- function(libname, pkgname) {\n    RTver <- read.dcf(file=system.file(\"DESCRIPTION\", package=pkgname),\n                      fields=\"Version\")\n    cat(paste(pkgname, RTver, \"\\n\"))\n}\n\n.onLoad<-function(lib,pkg) require(methods)\n\n",
    "created" : 1474996474786.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "174556297",
    "id" : "E5456A5A",
    "lastKnownWriteTime" : 1248217458,
    "last_content_update" : 1248217458,
    "path" : "~/Google Drive/Berkeley PhD/Research/Anomaly Detection/IsolationForest/R/IsolationForest.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}